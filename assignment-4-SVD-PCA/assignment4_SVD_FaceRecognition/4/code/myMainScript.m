%% Question 4 Report

tic;
%% ORL Dataset Face Recognition
% A combined image vector space as created across all training images (as opposed to seperate eigen vectors per individual)
% After normalising 'U' generated by Matlab's svd function, we
% create a search space by premultiplying the training image column
% vectors. The query image is then mapped to this search space of eigen
% coefficients by premultiplying with U and then knnsearch is used to
% evaluate which person the query image may correspond to. The resultant
% recognition is compared with the true identity, and we report our error
% rate in number of missed identifications/total number of test images.
% 
clear;
[trainvecspace, testvecspace, trainnumimg, testnumimg, imgrownum, imgcolnum] = orldataloader();
meanvec = mean(trainvecspace,2);
trainvecspace = bsxfun(@minus,trainvecspace,meanvec);
[U,S,V] = svd(trainvecspace,'econ');
%[sortU, sortS, sortV] = mySVD(trainvecspace);
%% Error Rate (ORL Dataset) with Matlab's svd function
% Miminum identification errors were observed when top 50 eigen values were
% retained
orlplotsvd = [];
for k = [1, 2, 3, 5, 10, 15, 20, 30, 50, 75, 100, 150, 170]
    Ured = zeros(size(U));
    Ured(:,1:k) = U(:,1:k);
    eigenvec = Ured';
    searchspace = eigenvec*trainvecspace;
    toterr=0;
    %totdist = 0;
    for i = 1:size(testvecspace,2)
        queryimg = eigenvec*(testvecspace(:,i)-meanvec);
        [idx,Dist] = knnsearch(searchspace',queryimg');
        if floor((idx-1)/trainnumimg) ~= floor((i-1)/(testnumimg))
            toterr = toterr+1;
        end
        %totdist = totdist + Dist;
    end
    orlplotsvd = [orlplotsvd (100*toterr/size(testvecspace,2))];
    %disp(toterr/size(testvecspace,2))
    %disp(totdist)
end
X = [1, 2, 3, 5, 10, 15, 20, 30, 50, 75, 100, 150, 170];
plot(X,orlplotsvd)
title('Error Rate (ORL dataset, matlab inbuilt svd)')
xlabel('Number of eigen values retained')
ylabel('Error rate (Percentage of incorrect identifications)')

%% Error rate (ORL Dataset) using eig function
L = trainvecspace'*trainvecspace;
[W ,D] = eig(L);
Uo = trainvecspace*W;
[singular_vals,idx] = sort(diag(D), 'descend');
U = Uo(:, idx);
orlplotsvd = [];
for k = [1, 2, 3, 5, 10, 15, 20, 30, 50, 75, 100, 150, 170]
    Ured = zeros(size(U));
    Ured(:,1:k) = U(:,1:k);
    eigenvec = Ured';
    searchspace = eigenvec*trainvecspace;
    toterr=0;
    %totdist = 0;
    for i = 1:size(testvecspace,2)
        queryimg = eigenvec*(testvecspace(:,i)-meanvec);
        [idx,Dist] = knnsearch(searchspace',queryimg');
        if floor((idx-1)/trainnumimg) ~= floor((i-1)/(testnumimg))
            toterr = toterr+1;
        end
        %totdist = totdist + Dist;
    end
    orlplotsvd = [orlplotsvd (100*toterr/size(testvecspace,2))];
    %disp(toterr/size(testvecspace,2))
    %disp(totdist)
end
X = [1, 2, 3, 5, 10, 15, 20, 30, 50, 75, 100, 150, 170];
plot(X,orlplotsvd)
title('Error Rate (ORL dataset, eig function)')
xlabel('Number of eigen values retained')
ylabel('Error rate (Percentage of incorrect identifications)')


%% Yale Dataset Face Recognition
% An initial hurdle was faced due to the dataset being incomplete, we
% anticipated 64 images for each individual but instead for some
% individuals we had 60-63 images (B10,12,13 - 60, B16 - 62, B15,17,18 - 63 images respectively)
% This data set was evaluated using matlab's inbuilt SVD function,
% retaining either top eigen vectors, or in the second case retaining top
% eigen values except the top 3 eigen vectors.
clear;
[trainvecspace, testvecspace, imgrownum, imgcolnum, corrtraintag, corrtesttag] = yaledataloader();
meanvec = mean(trainvecspace,2);
trainvecspace = bsxfun(@minus,trainvecspace,meanvec);
testvecspace = bsxfun(@minus,testvecspace,meanvec);
[U,S,V] = svd(trainvecspace,'econ');
%B18 -63
%B17 - 63
%B16 - 62
%B15 - 63
%B13 - 60
%B12 - 60
%B11 - 60
%% Error Rate (Yale Dataset) with top eigen values
% When retaining all Eigen Values, performance on the given test image test
% is not very good, and performance keeps improving even when 1000 eigen
% vectors are retained, this is unlike the expected behaviour of a minima
% (concavity) in the shape of error vs. number of eigen values retained.
% This Performance prompts the question whether the largest eigen values
% hold meaning, and we test that in the next section where top eigen
% values excluding top 3 eigen values are used to identify the faces.
startk = 1;
yaleplotsvd = [];
for k = [1, 2, 3, 5, 10, 15, 20, 30, 50, 60, 65, 75, 100, 200, 300, 500, 1000]
    Ured = zeros(size(U));
    %Ured(:,1:k) = U(:,1:k);
    Ured(:,startk:startk+k-1) = U(:,startk:startk+k-1);
    eigenvec = Ured';
    searchspace = eigenvec*trainvecspace;
    toterr=0;
    %totdist = 0;
    
    queryimgs = eigenvec*testvecspace;
    [idx, Dist] = knnsearch(searchspace',queryimgs');
    
    for i = 1:size(testvecspace,2)
        %queryimg = eigenvec*(testvecspace(:,i)-meanvec);
        %disp(idx(i))
        %[idx,Dist] = knnsearch(searchspace',queryimg');
        if corrtesttag(i) ~= corrtraintag(idx(i))
            toterr=toterr +1;
        end
    end
    %disp(toterr)
    yaleplotsvd = [yaleplotsvd (100*toterr/size(testvecspace,2))];
end
X = [1, 2, 3, 5, 10, 15, 20, 30, 50, 60, 65, 75, 100, 200, 300, 500, 1000];
plot(X,yaleplotsvd)
title('Error Rate (Yale dataset, all top eigen values retained)')
xlabel('Number of eigen values retained')
ylabel('Error rate (Percentage of incorrect identifications)')
%% Error Rate (Yale Dataset) with top (but 3) eigen values
% Performance improves substantially once top eigen values are ignored as
% can be seen in the plot below, allowing us to hit 40% accuracy.
startk = 4;
yaleplotsvd = [];
for k = [1, 2, 3, 5, 10, 15, 20, 30, 50, 60, 65, 75, 100, 200, 300, 500, 1000]
    Ured = zeros(size(U));
    %Ured(:,1:k) = U(:,1:k);
    Ured(:,startk:startk+k-1) = U(:,startk:startk+k-1);
    eigenvec = Ured';
    searchspace = eigenvec*trainvecspace;
    toterr=0;
    %totdist = 0;
    
    queryimgs = eigenvec*testvecspace;
    [idx, Dist] = knnsearch(searchspace',queryimgs');
    
    for i = 1:size(testvecspace,2)
        %queryimg = eigenvec*(testvecspace(:,i)-meanvec);
        %disp(idx(i))
        %[idx,Dist] = knnsearch(searchspace',queryimg');
        if corrtesttag(i) ~= corrtraintag(idx(i))
            toterr=toterr +1;
        end
    end
    %disp(toterr)
    yaleplotsvd = [yaleplotsvd (100*toterr/size(testvecspace,2))];
end
X = [1, 2, 3, 5, 10, 15, 20, 30, 50, 60, 65, 75, 100, 200, 300, 500, 1000];
plot(X,yaleplotsvd)
title('Error Rate (Yale dataset, top (but 3) eigen values retained)')
xlabel('Number of eigen values retained')
ylabel('Error rate (Percentage of incorrect identifications)')


%% References (last accessed 4-11-2020)
% https://in.mathworks.com/matlabcentral/answers/166629-is-there-any-way-to-list-all-folders-only-in-the-level-directly-below-a-selected-directory
%
% https://in.mathworks.com/matlabcentral/answers/341843-load-files-from-relative-path
%
% https://in.mathworks.com/matlabcentral/answers/40018-delete-zeros-rows-and-columns
toc;